{"ast":null,"code":"var _jsxFileName = \"/home/dustparticle/Workshop/React/hello-world/src/components/details/Details.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport \"./details.scss\";\n// Add default in data\nimport Emitter, { useEmitter } from \"../Context/Emitter\";\n\n// So add option for person to click and then the clicked item becomes active and opens options to edit delete or mark as complete\n// New problems\n\n//  1 - When I refresh the page  while one items is selected, it goes nuts\n//  2 - When an item is selected, clicking another one doesn't take away control from the first one\n// 3 - help\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Details = () => {\n  _s();\n  const {\n    emitterData,\n    activeName,\n    setActiveName\n  } = useEmitter();\n  const [time, setTime] = useState([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]);\n  const [checked, setChecked] = useState(false);\n  // problem is its trying to load data from a specific and then when it finds that there is nothing there\n  // i.e. emitterData(which is pretty much the selected date), it complains. put Default to stop this from happening\n  const [data, setData] = useState(null);\n  const dataSet = JSON.parse(localStorage.getItem(emitterData));\n  // I need to get the data and do a check and if any of the items has a check on it, turn it off and then update localStorage\n  // before I do the rest of the operations\n\n  // console.log(dataSet)\n\n  // if items have the same date then  just make the object use the date as the\n\n  const handleClick = (e, datum, dataSet, index) => {\n    console.log(datum);\n    // Solution, alert them that they can only select one item at a t ime\n    //  although it would make more sense to change the selection on click\n    if (dataSet[index].checked === false && checked === false) {\n      setChecked(true);\n      // datum.checked = true\n      dataSet[index].checked = true;\n      localStorage.setItem(emitterData, JSON.stringify(dataSet));\n      console.log(checked);\n    } else if (dataSet[index].checked === true && checked === true) {\n      setChecked(false);\n      // datum.checked = false\n      // dataSet[index].checked = false\n      dataSet[index].checked = false;\n      localStorage.setItem(emitterData, JSON.stringify(dataSet));\n    }\n\n    // This fucker is not changing the state of the item in localStorage, just the one it initially got from that is in \n    // dataSet\n\n    // put items into array and then render that,  that way we can change the array  by only selecting item we want\n    // change item in localstorage\n  };\n\n  const removeTask = task => {\n    const newTasks = dataSet.filter(datum => task === datum.task);\n    // dataSet.pop(newTasks)\n    console.log(dataSet);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"details\",\n    children: dataSet ? dataSet.map((datum, index) => {\n      return /*#__PURE__*/_jsxDEV(Emitter, {\n        className: \"emitter\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `details_item ${activeName}`,\n          onClick: e => handleClick(e, datum, dataSet, index),\n          children: [datum.checked ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"details_options\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              onClick: e => console.log(e.target.innerHTML),\n              children: \"Edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              onClick: e => removeTask(datum),\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              onClick: e => console.log(e.target.innerHTML),\n              children: \"Accomplished\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 43\n          }, this) : \"\", /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"details_right\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"details_right_start-time\",\n              children: datum.endTime\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: datum.task\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: datum.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }, this);\n    }) :\n    /*#__PURE__*/\n    // give people an option to choose what time the day starts\n    _jsxDEV(\"div\", {\n      id: \"default_task\",\n      children: \"No tasks assigned here\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 13\n  }, this);\n};\n//  unless im viewing all tasks there is no need to put the day \n_s(Details, \"ZK00noTwpmKk8zfI6uCE79RZ4kc=\", false, function () {\n  return [useEmitter];\n});\n_c = Details;\nexport default Details;\nvar _c;\n$RefreshReg$(_c, \"Details\");","map":{"version":3,"names":["useEffect","useState","Emitter","useEmitter","Details","emitterData","activeName","setActiveName","time","setTime","checked","setChecked","data","setData","dataSet","JSON","parse","localStorage","getItem","handleClick","e","datum","index","console","log","setItem","stringify","removeTask","task","newTasks","filter","map","target","innerHTML","endTime","description"],"sources":["/home/dustparticle/Workshop/React/hello-world/src/components/details/Details.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport \"./details.scss\"\n// Add default in data\nimport  Emitter, { useEmitter } from \"../Context/Emitter\"\n\n// So add option for person to click and then the clicked item becomes active and opens options to edit delete or mark as complete\n// New problems\n\n//  1 - When I refresh the page  while one items is selected, it goes nuts\n//  2 - When an item is selected, clicking another one doesn't take away control from the first one\n// 3 - help\n\nconst Details = () => {\n    const { emitterData,activeName,setActiveName } = useEmitter()\n    const [time,setTime] = useState([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n    const [checked,setChecked] = useState(false)\n    // problem is its trying to load data from a specific and then when it finds that there is nothing there\n    // i.e. emitterData(which is pretty much the selected date), it complains. put Default to stop this from happening\n    const [data,setData] = useState(null)\n    const dataSet =  JSON.parse(localStorage.getItem(emitterData)) \n    // I need to get the data and do a check and if any of the items has a check on it, turn it off and then update localStorage\n    // before I do the rest of the operations\n    \n    // console.log(dataSet)\n\n    // if items have the same date then  just make the object use the date as the\n\n    const handleClick = (e,datum,dataSet,index) => {\n        console.log(datum)\n        // Solution, alert them that they can only select one item at a t ime\n        //  although it would make more sense to change the selection on click\n        if(dataSet[index].checked === false && checked === false){\n            setChecked(true)\n            // datum.checked = true\n            dataSet[index].checked = true\n            localStorage.setItem(emitterData,JSON.stringify(dataSet))\n            console.log(checked)\n        }else if(dataSet[index].checked === true && checked === true){\n            setChecked(false)\n            // datum.checked = false\n            // dataSet[index].checked = false\n            dataSet[index].checked = false\n            localStorage.setItem(emitterData,JSON.stringify(dataSet))\n        }\n\n\n        // This fucker is not changing the state of the item in localStorage, just the one it initially got from that is in \n        // dataSet\n        \n        // put items into array and then render that,  that way we can change the array  by only selecting item we want\n        // change item in localstorage\n    }   \n\n        const removeTask = (task) => {\n            const newTasks = dataSet.filter((datum) => task === datum.task)\n            // dataSet.pop(newTasks)\n            console.log(dataSet)\n        }\n\n\n        return (\n            <div className='details'>\n        {/* {time.map((hour) => {\n            return(\n                <div className=\"times\">\n                <div >0{hour}:00</div>\n                </div>\n                )\n            })} */}\n\n            {dataSet ? dataSet.map((datum,index) => {\n                return(\n                    <Emitter key={index} className=\"emitter\">\n                        {/* {dataSet[index] === index && datum.checked === false ? <h1>bulo</h1>:<h1>Hello</h1>} */}\n                    {/* <div className={`details_item ${activeName}`} onClick={(e) => handleClick(e,datum,dataSet)}> */}\n                    <div className={`details_item ${activeName}`} onClick={(e) => handleClick(e,datum,dataSet,index)}>\n                        { datum.checked ? <div className=\"details_options\">\n                            {/* mmm ah awe mwe */}\n                            <p onClick={(e) => console.log(e.target.innerHTML)}>Edit</p>\n                            <p onClick={(e) => removeTask(datum)}>Delete</p>\n                            <p onClick={(e) => console.log(e.target.innerHTML)}>Accomplished</p>\n                             </div> : \"\"}\n                        {/* Its marking all of them because the activeName class is apllied to every singl one. Need to change this */}\n                        {/* <div className=\"details_left\"> */}\n                            {/* <div>{datum.startTime}</div> */}\n                            {/* Put conditional rendering or if statement to check which one is bigger */}\n                            {/* <div>{datum.endTime}</div> */}\n                            {/* <div>{datum.date.split(\"-\")[2]}</div> */}\n                            {/* <div>Thur</div> */}\n                        {/* </div> */}\n                        <div className=\"details_right\">\n                            <span className=\"details_right_start-time\">{datum.endTime}</span>\n                            <h3>{datum.task}</h3>\n                            <p>{datum.description}</p>\n                            {/* <span className=\"details_right_state\"> */}\n                                {/* <span className=\"details_right_state-active\"></span> */}\n                            {/* </span> */}\n                        </div>\n                    </div>\n                    </Emitter>\n                )\n            }) : \n            // give people an option to choose what time the day starts\n            <div id=\"default_task\">No tasks assigned here</div>\n        } \n\n    </div>\n  )\n}\n//  unless im viewing all tasks there is no need to put the day \n\nexport default Details"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}